<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nginx on Laelaps</title>
    <link>https://blog.laelaps.us/categories/nginx/</link>
    <description>Recent content in Nginx on Laelaps</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 02 Oct 2024 00:51:30 +0000</lastBuildDate>
    <atom:link href="https://blog.laelaps.us/categories/nginx/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>重读Nginx</title>
      <link>https://blog.laelaps.us/posts/tools/nginx/</link>
      <pubDate>Sat, 16 Sep 2023 14:34:33 +0800</pubDate>
      <guid>https://blog.laelaps.us/posts/tools/nginx/</guid>
      <description>&lt;h1 id=&#34;nginx&#34;&gt;Nginx&lt;/h1&gt;&#xA;&lt;p&gt;在之前就看过Nginx，但是很久了，许多内容都忘记了，就只剩下Nginx是一个Web服务器，可以干很多牛逼的事。这次突然想再去玩玩Nginx了。&lt;/p&gt;&#xA;&lt;p&gt;Nginx是一个高性能的、轻量级的Web服务器、反向代理服务器以及电子邮件代理服务器。反向代理服务器是指来自互联网的流量全部指向代理服务器，然后代理服务器再将请求转向内部的其他服务器上，再将从服务器上的结果重新返回给用户；有反向服务器就必然有正向代理服务器，正向代理服务器最常见的可能就是“翻墙”了，典型的正向代理，正向代理服务器代理用户去访问外部的服务器，所以正向代理服务提供了安全性、隐私保护等功能。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;|-------------------|&#xA;|   Client1\        |&#xA;|   Client2 \ Proxy |-------&amp;gt; Origin Server&#xA;|   Client3 /       |&#xA;|-------------------|&#xA;   Forward Proxy 代理客户端&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;|-------------------|     |-------------------|&#xA;|   Client1 -------&amp;gt;|     |       / Server 1  |&#xA;|   Client2 -------&amp;gt;|----&amp;gt;| Proxy - Server 2  |&#xA;|   Client3 -------&amp;gt;|     |       \ Server 3  |&#xA;|-------------------|     |-------------------|&#xA;                        Forward Proxy 代理服务器&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果我们只是想使用Nginx的话，不想研究他的源码（至少我不想），那么我们只需要知道他的配置文件即可，在接下来，我们也只是居于配置文件上的学习；学会之后，也不用我们真的去手写配置文件，至少我是不愿意的，我们可以利用&lt;a href=&#34;https://github.com/digitalocean/nginxconfig.io&#34;&gt;https://github.com/digitalocean/nginxconfig.io&lt;/a&gt;去生成配置。&lt;/p&gt;&#xA;&lt;h2 id=&#34;常用命令&#34;&gt;常用命令&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;nginx -s stop       快速关闭Nginx，可能不保存相关信息，并迅速终止web服务。&#xA;nginx -s quit       平稳关闭Nginx，保存相关信息，有安排的结束web服务。&#xA;nginx -s reload     因改变了Nginx相关配置，需要重新加载配置而重载。&#xA;nginx -s reopen     重新打开日志文件。&#xA;nginx -c filename   为 Nginx 指定一个配置文件，来代替缺省的。&#xA;nginx -t            不运行，仅仅测试配置文件。nginx 将检查配置文件的语法的正确性，并尝试打开配置文件中所引用到的文件。&#xA;nginx -v            显示 nginx 的版本。&#xA;nginx -V            显示 nginx 的版本，编译器版本和配置参数。&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;配置&#34;&gt;配置&lt;/h2&gt;&#xA;&lt;p&gt;我们先使用ChatGPT生成一份配置文件，要求如下:&#xA;我需要部署一个前后端分离的项目，前端包括管理页面（https://domain.xyz/backend)，前端页面(&lt;a href=&#34;https://domain.xyz/&#34;&gt;https://domain.xyz/&lt;/a&gt;)，所有的API请求（https://domain.xyz/api/&amp;hellip;），给出一个nginx的配置文件，前端文件放在/var/www/下。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
