<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring on Laelaps</title>
    <link>https://blog.laelaps.us/categories/spring/</link>
    <description>Recent content in Spring on Laelaps</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 08 Oct 2024 00:51:10 +0000</lastBuildDate>
    <atom:link href="https://blog.laelaps.us/categories/spring/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spring MVC 拦截器</title>
      <link>https://blog.laelaps.us/posts/spring/mvc/handlerinterceptor/</link>
      <pubDate>Thu, 07 Sep 2023 08:51:44 +0800</pubDate>
      <guid>https://blog.laelaps.us/posts/spring/mvc/handlerinterceptor/</guid>
      <description>&lt;h1 id=&#34;过滤器vs拦截器&#34;&gt;过滤器vs拦截器&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;过滤器（Filter）是Servlet的特性，他属于Servlet容器；而拦截器（HandlerInterceptor）是由Spring MVC提供的特性。&lt;/li&gt;&#xA;&lt;li&gt;Filter可以拦截所到达的所有请求，而HandlerInterceptor只能拦截被DispatcherServlet处理过的请求。&lt;/li&gt;&#xA;&lt;li&gt;在Request到达Servlet之前先执行Filter的预处理逻辑，在Request到达DispatcherServlet之后，Handler执行之前执行拦截器的功能。&lt;/li&gt;&#xA;&lt;li&gt;Filter在doFilter方法中定义预处理和后处理两个逻辑，之间使用filterChain.doFilter进行分隔，同时Filter自身有初始化和销毁的方法，即init和destroy；而HandlerIntercepter则是将这两个方式分开preHandle、postHandle两个方法，同时他拥有一个afterCompletion方法，无论有没有发生异常，在DispatchServlet之后，都会执行afterCompletion。&lt;/li&gt;&#xA;&lt;li&gt;如果在Spring中使用HandlerInterceptor可以自动Spring容器中被管理。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h1 id=&#34;原理&#34;&gt;原理&lt;/h1&gt;&#xA;&lt;p&gt;在HandlerMapping在根据Request查找Handler时，他会返回一个处理器执行链对象（HandlerExecutionChain），内部包含了一个Handler和HandlerInterceptor执行链。如果想要自定义Handler拦截器，那么需要实现&lt;code&gt;HandlerInterceptor&lt;/code&gt;接口中的三个方法。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;preHandle&lt;/code&gt;：在处理Handler之前执行。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;postHandle&lt;/code&gt;：在处理Handler成功之后，根据执行链的倒序执行，如果前面的流程出现异常则不会被执行。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;afterCompletion&lt;/code&gt;：在请求执行完之后执行，他之后对preHandle返回True的HandlerInterceptor执行。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;prehandle&#34;&gt;preHandle&lt;/h2&gt;&#xA;&lt;p&gt;preHandle返回一个bool类型的值，可以用来终端或继续处理执行链。如果方法返回True时，他会继续沿着执行链继续向后执行；如果返回false，DispatcherServlet 会假定拦截器本身已处理完毕请求（例如，已经渲染了合适的视图），此时将尝试直接倒序执行此前已放行的拦截器链的afterCompletion 方法。&lt;/p&gt;&#xA;&lt;h2 id=&#34;多个拦截器&#34;&gt;多个拦截器&lt;/h2&gt;&#xA;&lt;p&gt;我们在MVC的配置中可以配置多个拦截器，在默认情况下是通过配置的顺序来执行，我们可以使用InterceptorRegistration的&lt;code&gt;Order&lt;/code&gt;属性来定义优先级问题，order中的值越小，优先级越高。&lt;/p&gt;&#xA;&lt;h1 id=&#34;example&#34;&gt;Example&lt;/h1&gt;&#xA;&lt;p&gt;定义一个实现了HandlerInterceptor接口的拦截器。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Component&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyHandlerInterceptor&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; HandlerInterceptor {  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;preHandle&lt;/span&gt;(HttpServletRequest request, HttpServletResponse response, Object handler) &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; Exception {  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MyHandlerInterceptor preHandle method......&amp;#34;&lt;/span&gt;);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; HandlerInterceptor.&lt;span style=&#34;color:#a6e22e&#34;&gt;super&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;preHandle&lt;/span&gt;(request, response, handler);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;postHandle&lt;/span&gt;(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; Exception {  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        HandlerInterceptor.&lt;span style=&#34;color:#a6e22e&#34;&gt;super&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;postHandle&lt;/span&gt;(request, response, handler, modelAndView);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MyHandlerInterceptor postHandle method......&amp;#34;&lt;/span&gt;);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;afterCompletion&lt;/span&gt;(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; Exception {  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        HandlerInterceptor.&lt;span style=&#34;color:#a6e22e&#34;&gt;super&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;afterCompletion&lt;/span&gt;(request, response, handler, ex);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MyHandlerInterceptor afterCompletion method......&amp;#34;&lt;/span&gt;);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;配置MVC，将HandlerInterceptor交给Spring管理。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spring Boot 监听事件</title>
      <link>https://blog.laelaps.us/posts/spring/boot/applicationevent/</link>
      <pubDate>Tue, 05 Sep 2023 13:46:42 +0800</pubDate>
      <guid>https://blog.laelaps.us/posts/spring/boot/applicationevent/</guid>
      <description>&lt;h1 id=&#34;事件监听&#34;&gt;事件监听&lt;/h1&gt;&#xA;&lt;p&gt;Spring中的事件监听是观察者模式的一种实现，在观察者模式当中，应当有主题、发布者、订阅人；所有在Spring的事件中存在事件（ApplicationEvent）、监听器（ApplicationListener）和事件发布三部分。&lt;/p&gt;&#xA;&lt;p&gt;事件用于在松耦合的组件之间交换信息，发布者和订阅者之间没有直接耦合，使得修改发布者并不会影响订阅者，反之也成立。&lt;/p&gt;&#xA;&lt;h2 id=&#34;监听事件&#34;&gt;监听事件&lt;/h2&gt;&#xA;&lt;p&gt;监听事件是消息传递的对象，用来传递事件消息，在Spring中我们去继承&lt;code&gt;ApplicationEvent&lt;/code&gt;来定义一个事件。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyEvent&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; ApplicationEvent {  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String name;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; age;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyEvent&lt;/span&gt;(Object source, String name, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; age) {  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;(source);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; age;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;事件发布&#34;&gt;事件发布&lt;/h2&gt;&#xA;&lt;p&gt;在定义事件后，我们需要发布事件，我们可以使用&lt;code&gt;ApplicationContext&lt;/code&gt;和&lt;code&gt;ApplicationEventPublisher&lt;/code&gt;两者来发布事件；前者去继承了后者。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Service&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyEventService&lt;/span&gt; {  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Autowired&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ApplicationContext applicationContext;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Autowired&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ApplicationEventPublisher applicationEventPublisher;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;myEvent&lt;/span&gt;(){  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;发布事件......&amp;#34;&lt;/span&gt;);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        applicationContext.&lt;span style=&#34;color:#a6e22e&#34;&gt;publishEvent&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MyEvent(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;laelaps&amp;#34;&lt;/span&gt;, 12));  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;事件发布完毕。&amp;#34;&lt;/span&gt;);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;myEvent2&lt;/span&gt;(){  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;发布事件......&amp;#34;&lt;/span&gt;);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        applicationEventPublisher.&lt;span style=&#34;color:#a6e22e&#34;&gt;publishEvent&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MyEvent(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;laelaps&amp;#34;&lt;/span&gt;, 12));  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;事件发布完毕。&amp;#34;&lt;/span&gt;);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;事件监听-1&#34;&gt;事件监听&lt;/h2&gt;&#xA;&lt;p&gt;在发布了事件后，我们需要监听者去监听发布的事件；在Spring中有两种方式来定义监听对象；&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;使用&lt;code&gt;@EventListener&lt;/code&gt;注解来定义监听对象。&lt;/li&gt;&#xA;&lt;li&gt;实现&lt;code&gt;ApplicationListener&lt;/code&gt;接口。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;这两种都需要向IOC容器中注册，因为要让Spring去托管这些Bean。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
