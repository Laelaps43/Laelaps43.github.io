<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on Laelaps</title>
    <link>https://blog.laelaps.us/categories/docker/</link>
    <description>Recent content in Docker on Laelaps</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 14 Jul 2023 22:47:10 +0800</lastBuildDate><atom:link href="https://blog.laelaps.us/categories/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker容器</title>
      <link>https://blog.laelaps.us/posts/docker/dockercontainer/</link>
      <pubDate>Fri, 14 Jul 2023 22:47:10 +0800</pubDate>
      
      <guid>https://blog.laelaps.us/posts/docker/dockercontainer/</guid>
      <description>什么是容器？ 容器是镜像运行的实例，我们可以从一个镜像中运行多个容器，容器比传统的虚拟机更快和更轻量级；在采用虚拟机时，我们的虚拟机的软件要将物理资源进行划分，然后分配给每一个虚拟机，他是一种居于硬件虚拟化；而在容器时代，我们的物理资源全部分配给操作系统，我们的容器引擎想操作系统申请资源，每一个容器是一个独立的相互隔离的进程，他可以自动的调整资源的大小，容器是一种居于操作系统的虚拟化。
启动容器 docker container run &amp;lt;options&amp;gt; &amp;lt;im-age&amp;gt;:&amp;lt;tag&amp;gt; &amp;lt;app&amp;gt; // 启动一个ubuntu docker container run -it ubuntu:20.04 /bin/bash // 或者省去container docker run -it ubuntu:20.04 /bin/sh 当运行docker run时，docker会根据指定的镜像的标签在本地查找，如果查找不到则自动进行pull。然后运行命令指定的程序。
-t是分配一个伪终端将（pseudo-tty）绑定到容器的标准输入上。 -i是让容器的标准输入保存打开。 退出当前终端使用exit()，容器会停止运行，因为这时候终端是容器唯一运行的程序。 docker使用docker container start来启动一个已经停止的容器；使用docker container restart来将一个运行中的容器重新启动它。 查看容器 docker使用docker container ls来查看当前正在运行的容器，在ls之后添加-a来查看全部的容器，包括已经退出的容器。
删除容器 我们在查看所有容器后，会发现有许多停止运行的容器，使用docker container rm可以将已经停止运行的容器删除。
$ docker container ls -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 7f87eac41019 ubuntu:20.04 &amp;#34;/bin/bash&amp;#34; 13 minutes ago Exited (0) 6 minutes ago condescending_jennings f412d9c4ff7e ubuntu:20.04 &amp;#34;/bin/sh&amp;#34; 14 minutes ago Exited (0) 7 minutes ago $ docker container rm 7f87eac41019 f412d9c4ff7e 7f87eac41019 f412d9c4ff7e 守护态运行 在之前我们都是的容器都是将输入结果输出到当前的数组的终端上，如果我们想让容器运行在后台上，可以在docker run -d .</description>
    </item>
    
    <item>
      <title>Docker镜像</title>
      <link>https://blog.laelaps.us/posts/docker/dockerimage/</link>
      <pubDate>Tue, 11 Jul 2023 19:09:44 +0800</pubDate>
      
      <guid>https://blog.laelaps.us/posts/docker/dockerimage/</guid>
      <description>什么是Docker Docker是一种容器，他对传统的Linux容器进行了封装，简化了他容器的创建和维护；Docker不像传统的虚拟机一样需要虚拟出一层硬件来，他的应用程序直接运行在宿主的内核中，但是运行的进程独立于宿主和其他的容器。
优势 对资源的更好的利用，不用像传统虚拟机一样虚拟出硬件之后在运行一个完整的系统。 Docker容器应用启动更快，节省时间。（但是我的Docker Desktop启动很慢） 一致的运行环境，Docker 保证了应用运行的环境是一样的，只有宿主的内核不一样。 一次创建和配置，在任意的地方运行。 镜像 镜像类似于一个类，他是创建容器的模板，而且镜像是由多层组成，一层建立在另外一层之上；他包含应用运行所需要的文件和依赖等。
命名 Docker镜像存储在镜像仓库中，默认的的仓库服务是Docker Hub（Docker维护）。 如果我们只需要给定一个镜像名字和标签（未给定为latest），就能在官方仓库中定位一个镜像；二如果需要从Docker Hub中拉取一个镜像，需要加入Docker Hub的用户名。当然我们还可以拉取第三方仓库的镜像，则需要加入第三方仓库的地址和端口号。
// 在Docker Hub中拉取 docker pull ubuntu:20.04 // 在Docker Hub中拉取第三方 docker pull bitnami/postgresql:15.3.0 // docker pull quay.io/kiwigrid/k8s-sidecar 分层 Docker镜像由一些松耦合的只读镜像组成，所有的Docker镜像都起源于一个基础镜像层，我们在当前镜像之上创建新的镜像层，我们就可以对新的镜像层进行修改或者增加。 尽管镜像由多层镜像组合而成，但是他们对外还是保存一个镜像文件。 多个镜像共享镜像层，因为有的镜像会依赖相同的镜像层，在这种情况下，如果镜像层已经存在，则不会重新拉取。
$ docker image inspect mysql:latest ... &amp;#34;RootFS&amp;#34;: { &amp;#34;Type&amp;#34;: &amp;#34;layers&amp;#34;, &amp;#34;Layers&amp;#34;: [ &amp;#34;sha256:9cd9df9ffc972e9abc946d855162ef0c40dff9a89f10c962b7920154a3d943d8&amp;#34;, &amp;#34;sha256:824505732bf475e99d3d9f2d2a1bbcb2f822005a5eb42ed3bd6c90d896601cf6&amp;#34;, &amp;#34;sha256:0b175674497447465ef1a69f9aa74eaad5fc89875eceb9257b1f51723a676b22&amp;#34;, &amp;#34;sha256:824c2933e60c068e80f2aeed3156289d52e173302c9591307186a1901d511747&amp;#34;, &amp;#34;sha256:4645c1089915b7a96108959a038bbabd1a9301561c04884ee25217fbd8529cbd&amp;#34;, &amp;#34;sha256:2dddefc501cc94ee7378f11117eb7537f18e42dff066fd0b0e352579fa201e47&amp;#34;, &amp;#34;sha256:3e8acfe4342fadf5703bc0e57f029aa8645f5bdad6071289b98f33e1b207f522&amp;#34;, &amp;#34;sha256:5f038062397273abd71d4393adf7dbf3b5517e0f2c660054d1bedb1d629e3dd9&amp;#34;, &amp;#34;sha256:16f4176c5cad94a63121b2f4f77a2027f15c8b88559d423daf345a51d41251eb&amp;#34;, &amp;#34;sha256:394c5cd5b4baf7e17088e44077a8b14ecbd9ba5d460629f1efb8ea3a90380a08&amp;#34;, &amp;#34;sha256:e2eaf447bf15d59b9e8f4e7c00c63cf35bf9096403563eed770cd758d27eb557&amp;#34; ] }, .... 标签 用来标记仓库中的镜像，一个镜像能有多个标签。
拉取 docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签] 悬虚镜像 zlmediakit/zlmediakit master 635f082db6f7 7 weeks ago 597MB // 悬虚镜像 ubuntu &amp;lt;none&amp;gt; 1c5c8d0b973a 4 months ago 72.</description>
    </item>
    
  </channel>
</rss>
